@page "/Reservations"
@using MauiApp1.Data


<center><h3>Reservations Finder</h3></center>

<div id="finder2">
    <div class="code">
        <label for="code-field"> Code: </label>
        <input id="code-field"
               type="text"
               class="code-field"
               placeholder="Any"
               @bind-value="@Code" />
    </div>

    <div class="airline2">
        <label for="airline2-field"> Airline: </label>
        <input id="airline2-field"
               type="text"
               class="airline2-field"
               placeholder="Any"
               @bind-value="@Airline" />
    </div>

    <div class="name2">
        <label for="name2-field"> Name: </label>
        <input id="name2-field"
               type="text"
               class="name2-field"
               placeholder="Any"
               @bind-value="@Name" />
    </div>

    <button class="btn" @onclick="FindReservations">Find Reservations</button>
</div>


<center><h3>Reservations</h3></center>

<div class="reservations">
    @if (Reservationss == null || Reservationss.Count == 0)
    {
        <select class="reservations-field" disabled>
            <option selected>Loading...</option>
        </select>
    }
    else
    {
        <select class="reservations-field" @onchange="OnReservationSelectionChanged">
            <option selected>Please select reservation</option>
            @foreach (var reservation in Reservationss)
            {
                <option value="@GetReservationDisplayText(reservation)">@GetReservationDisplayText(reservation)</option>
            }
        </select>
    }
</div>





@code {
    private string Code { get; set; }
    private string Airline { get; set; }
    private string Name { get; set; }
    private string SelectedReservationCode { get; set; }
    private string SelectedAirlineCode { get; set; }
    private string SelectedFlightCode { get; set; }
    private string SelectedDay { get; set; }
    private string SelectedCost { get; set; }
    private string SelectedName { get; set; }
    private string SelectedCitizenship { get; set; }

    
    
    
    private List<ReservationData> Reservationss { get; set; } = new List<ReservationData>();

    private void FindReservations()
    {
        var reservations = new Reservation().GetReservationData();

        // Filter reservations based on user input
        if (!string.IsNullOrEmpty(Code))
        {
            reservations = reservations.Where(r => r.ReservationCode == Code).ToList();
        }

        if (!string.IsNullOrEmpty(Airline))
        {
            reservations = reservations.Where(r => r.SelectedAirline == Airline).ToList();
        }

        if (!string.IsNullOrEmpty(Name))
        {
            reservations = reservations.Where(r => r.Name == Name).ToList();
        }

        // Display filtered reservations in the list control
        Reservationss = reservations;
    }

    private string statusValue;

    private string GetReservationDisplayText(ReservationData reservation)
    {
        return $"{reservation.ReservationCode}, {reservation.SelectedFlightCode}, {reservation.SelectedAirline}, {reservation.SelectedDay}, {reservation.Cost}, {reservation.Name}, {reservation.Citizenship}, {reservation.Status}";
    }


    private void OnReservationSelectionChanged(ChangeEventArgs args)
    {

        var selectedReservationText = (string)args.Value;
        if (selectedReservationText == "Please select reservation")
        {
            SelectedReservationCode = "";
            SelectedFlightCode = "";
            SelectedAirlineCode = "";
            SelectedDay = "";
            SelectedCost = "";
            SelectedName = "";
            SelectedCitizenship = "";

            return;
        }

        var parts = selectedReservationText.Split(',');
        if (parts.Length < 8)
        {
            // handle error
            return;
        }

        var selectedReservationCode = parts[0].Trim();
        var selectedFlightCode = parts[1].Trim();
        var selectedAirlineCode = parts[2].Trim();
        var selectedDay = parts[3].Trim();
        var selectedCost = parts[4].Trim();
        var selectedName = parts[5].Trim();
        var selectedCitizenship = parts[6].Trim();
        var Status = parts[7].Trim();
        SelectedReservationCode = selectedReservationCode;
        SelectedFlightCode = selectedFlightCode;
        SelectedAirlineCode = selectedAirlineCode;
        SelectedDay = selectedDay;
        SelectedCost = selectedCost;
        SelectedName = selectedName;
        SelectedCitizenship = selectedCitizenship;
        statusValue = Status;
        
       
    }

}




<h3 class="reserve-title">Reserve</h3>

<div class="reservationCode">
    <label> Reservation code: </label>
    <input type="text"
           class="reservationCode-field"
           placeholder="Reservation Code"
           readonly
           @bind-value="SelectedReservationCode" />
</div>

<div class="flightCode2">
    <label> Flight code: </label>
    <input type="text"
           class="flightCode2-field"
           placeholder="flightCode"
           readonly
           @bind-value="SelectedFlightCode" />
</div>

<div class="airline2">
    <label> Airline: </label>
    <input type="text"
           class="airline2-field"
           placeholder="Airline"
           readonly
           @bind-value="SelectedAirlineCode" />
</div>


<div class="day3">
    <label> Day: </label>
    <input type="text"
           class="day3-field"
           placeholder="Day"
           readonly
           @bind-value="SelectedDay" />
</div>

<div class="cost3">
    <label> Cost: </label>
    <input type="text"
           class="cost3-field"
           placeholder="0"
           readonly
           @bind-value="SelectedCost" />
</div>

<div class="name3">
    <label> Name: </label>
    <input type="text"
           class="name3-field"
           placeholder="Name"
           @bind-value="SelectedName" />
</div>

<div class="citizenship2">
    <label> Citizenship: </label>
    <input type="text"
           class="citizenship2-field"
           placeholder="Citizenship"
           @bind-value="SelectedCitizenship" />
</div>

<div class="status2">
    <label>Status:</label>
    <input type="text"
           class="status-field"
           placeholder="Active"
           @bind-value="statusValue" />
</div>

<div class="save">
    <button type="button" class="btn" @onclick="SaveReservation">
        Save
    </button>
</div>



@code {
    private Reservation reservation = new Reservation();

    public void SaveReservation()
    {
        // Find the selected reservation
        var selectedReservation = Reservationss.FirstOrDefault(r => r.ReservationCode == SelectedReservationCode);

        if (selectedReservation != null)
        {
            // Update the reservation's name and citizenship values
            selectedReservation.Name = SelectedName;
            selectedReservation.Citizenship = SelectedCitizenship;

            // Get all reservations
            var reservations = reservation.GetReservationData();

            // Update the reservation in the list
            var index = reservations.FindIndex(r => r.ReservationCode == selectedReservation.ReservationCode);
            reservations[index] = selectedReservation;

            // Save the updated reservations list
            var path = @"C:\Users\mac_h\source\repos\monkeyV10\mauiassignmentfinal\bin\reservations.bin";
            using (var stream = new FileStream(path, FileMode.Create))
            using (var writer = new BinaryWriter(stream))
            {
                foreach (var reservation in reservations)
                {
                    writer.Write(reservation.SelectedFlightCode);
                    writer.Write(reservation.SelectedAirline);
                    writer.Write(reservation.SelectedDay);
                    writer.Write(reservation.SelectedTime);
                    writer.Write(reservation.Cost);
                    writer.Write(reservation.Name);
                    writer.Write(reservation.Citizenship);
                    writer.Write(reservation.ReservationCode);
                    writer.Write('\n'); // Use newline character to separate the records
                }
            }
        }
    }
}
