@using MauiApp1.Data

@page "/Flights"
<link rel="stylesheet" href="style.css" 
          class="css" />
<center><h3>Flight Finder</h3></center>

<div id="finder">
    <div class="from">
        <label>From:</label>
        <select class="location-field" id="fromAirport" @bind="@selectedFromAirport">
            <option value="">Any</option>
            <!-- Loop through the list of airports and create an option element for each one -->
            @foreach (var flight in Flightmanager.GetFlights())
            {
                <option value="@flight.FromCity">@flight.FromCity</option>
            }
        </select>
    </div>

    <div class="to">
        <label>To:</label>
        <select class="location-field" id="toAirport" @bind="@SelectedToAirport">
            <option value="">Any</option>
            <!-- Loop through the list of airports and create an option element for each one -->
            @foreach (var flight in Flightmanager.GetFlights())
            {
                <option value="@flight.ToCity">@flight.ToCity</option>
            }
        </select>
    </div>

    <div class="day">
        <label>Day:</label>
        <select class="day-field" id="travelDate" @bind="@selectedTravelDate">
            <option value="">Any</option>
            <!-- Loop through the list of unique days from the flights data and create an option element for each one -->
            @foreach (var day in Flightmanager.GetFlights().Select(f => f.Day).Distinct().OrderBy(d =>
            {
                switch (d.ToLower())
                {
                    case "monday":
                        return 1;
                    case "tuesday":
                        return 2;
                    case "wednesday":
                        return 3;
                    case "thursday":
                        return 4;
                    case "friday":
                        return 5;
                    case "saturday":
                        return 6;
                    case "sunday":
                        return 7;
                    default:
                        return int.MaxValue; // put unknown days at the end
                }
            }))
            {
                <option value="@day">@day</option>
            }

        </select>
    </div>


    <button class="btn" @onclick="FindFlights">Find Flights</button>
</div>

@code {
    private bool showFlights = false;
    private string selectedFromAirport { get; set; }
    public string SelectedToAirport { get; set; }
    public string selectedTravelDate { get; set; }
    private List<Flight123> flights;
    private List<Airport> airports;

    private void FindFlights()
    {
        if (!string.IsNullOrEmpty(selectedFromAirport) && !string.IsNullOrEmpty(SelectedToAirport) && !string.IsNullOrEmpty(selectedTravelDate))
        {
            flights = Flightmanager.GetFlights().Where(f => f.FromCity == selectedFromAirport && f.ToCity == SelectedToAirport && f.Day == selectedTravelDate).ToList();
        }
        else if (!string.IsNullOrEmpty(selectedFromAirport) && !string.IsNullOrEmpty(SelectedToAirport))
        {
            flights = Flightmanager.GetFlights().Where(f => f.FromCity == selectedFromAirport && f.ToCity == SelectedToAirport).ToList();
        }
        else if (!string.IsNullOrEmpty(selectedFromAirport) && !string.IsNullOrEmpty(selectedTravelDate))
        {
            flights = Flightmanager.GetFlights().Where(f => f.FromCity == selectedFromAirport && f.Day == selectedTravelDate).ToList();
        }
        else if (!string.IsNullOrEmpty(SelectedToAirport) && !string.IsNullOrEmpty(selectedTravelDate))
        {
            flights = Flightmanager.GetFlights().Where(f => f.FromCity == SelectedToAirport && f.Day == selectedTravelDate).ToList();
        }
        else if (!string.IsNullOrEmpty(selectedFromAirport))
        {
            flights = Flightmanager.GetFlights().Where(f => f.FromCity == selectedFromAirport).ToList();
        }
        else if (!string.IsNullOrEmpty(SelectedToAirport))
        {
            flights = Flightmanager.GetFlights().Where(f => f.ToCity == SelectedToAirport).ToList();
        }
        else if (!string.IsNullOrEmpty(selectedTravelDate))
        {
            // If travel date is selected, filter flights based on FromCity, ToCity and Day
            flights = Flightmanager.GetFlights().Where(f => f.Day == selectedTravelDate).ToList();
        }
        else
        {
            flights = new List<Flight123>();
        }

        showFlights = flights.Any();
    }


}




<center><h3>Flights</h3></center>

@if (showFlights)
{
    <div class="flights">
        <label>Select a flight:</label>
        <select class="flights-field" name="flightCode">
            @foreach (var flight in flights)
            {
                <option value="@flight.FlightCode">@flight.Airline - From: @flight.FromCity, To: @flight.ToCity, Date: @flight.Day, Time: @flight.Time, Seats: @flight.Seat, Cost: @flight.Cost</option>
            }
        </select>
    </div>
}
else if (string.IsNullOrEmpty(selectedFromAirport) || string.IsNullOrEmpty(SelectedToAirport) || string.IsNullOrEmpty(selectedTravelDate))
{
    <div class="flights">
        <label>Select a flight:</label>
        <select class="flights-field" name="flightCode">
            <option value="">Loading...</option>
        </select>
    </div>
}
else
{
    <div class="flights">
        <label>Select a flight:</label>
        <select class="flights-field" name="flightCode">
            <option value="">There are no flights</option>
        </select>
    </div>
}





<h3 class="reserve-title">Reserve</h3>

<div class="flightCode">
    <label> Flight code: </label>
    <input type="text"
           class="flightCode-field"
           placeholder="Flight" />
</div>

<div class="airline">
    <label> Airline: </label>
    <input type="text"
           class="airline-field"
           placeholder="Airline" />
</div>

<div class="day2">
    <label> Day: </label>
    <input type="text"
           class="day2-field"
           placeholder="Day" />
</div>

<div class="time">
    <label> Time: </label>
    <input type="text"
           class="time-field"
           placeholder="Time" />
</div>

<div class="cost">
    <label> Cost: </label>
    <input type="text"
           class="cost-field"
           placeholder="0" />
</div>

<div class="name">
    <label> Name: </label>
    <input type="text"
           class="name-field"
           placeholder="Name" />
</div>

<div class="citizenship">
    <label> Citiizenship: </label>
    <input type="text"
           class="citizenship-field"
           placeholder="Citizenship" />
</div>

<div class="reserve reserve-btn">
    <button type="button" class="btn">Reserve</button><br />
    <div class="reservation-code">
        <span>Reservation code: </span>
    </div>
</div>







@code{

}