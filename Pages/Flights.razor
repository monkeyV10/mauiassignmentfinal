@using MauiApp1.Data

@page "/Flights"
<link rel="stylesheet" href="style.css"
      class="css" />
<center><h3>Flight Finder</h3></center>

<div id="finder">
    <div class="from">
        <label>From:</label>
        <select class="location-field" id="fromAirport" @bind="@selectedFromAirport">
            <option value="">Any</option>
            <!-- Loop through the list of airports and create an option element for each one -->
            @foreach (var flight in Flightmanager.GetFlights())
            {
                <option value="@flight.FromCity">@flight.FromCity</option>
            }
        </select>
    </div>

    <div class="to">
        <label>To:</label>
        <select class="location-field" id="toAirport" @bind="@SelectedToAirport">
            <option value="">Any</option>
            <!-- Loop through the list of airports and create an option element for each one -->
            @foreach (var flight in Flightmanager.GetFlights())
            {
                <option value="@flight.ToCity">@flight.ToCity</option>
            }
        </select>
    </div>

    <div class="day">
        <label>Day:</label>
        <select class="day-field" id="travelDate" @bind="@selectedTravelDate">
            <option value="">Any</option>
            <!-- Loop through the list of unique days from the flights data and create an option element for each one -->
            @foreach (var day in Flightmanager.GetFlights().Select(f => f.Day).Distinct().OrderBy(d =>
            {
               switch (d.ToLower())
               {
                   case "monday":
                       return 1;
                   case "tuesday":
                       return 2;
                   case "wednesday":
                       return 3;
                   case "thursday":
                       return 4;
                   case "friday":
                       return 5;
                   case "saturday":
                       return 6;
                   case "sunday":
                       return 7;
                   default:
                       return int.MaxValue; // put unknown days at the end
               }
            }))
            {
                <option value="@day">@day</option>
            }

        </select>
    </div>


    <button class="btn" @onclick="FindFlights">Find Flights</button>
</div>

@code {
    private bool showFlights = false;
    private string selectedFromAirport { get; set; }
    public string SelectedToAirport { get; set; }
    public string selectedTravelDate { get; set; }
    private List<Flight123> flights;
    private List<Airport> airports;

    private void FindFlights()
    {
        var filteredFlights = new List<Flight123>();


        foreach (var flight in Flightmanager.GetFlights())
        {
            if (!string.IsNullOrEmpty(selectedFromAirport) && flight.FromCity != selectedFromAirport)
            {
                continue;
            }

            if (!string.IsNullOrEmpty(SelectedToAirport) && flight.ToCity != SelectedToAirport)
            {
                continue;
            }

            if (!string.IsNullOrEmpty(selectedTravelDate) && flight.Day != selectedTravelDate)
            {
                continue;
            }

            filteredFlights.Add(flight);
        }

        flights = filteredFlights;
        showFlights = flights.Any();
    }

}


<center><h3>Flights</h3></center>



<center><h3>Flights</h3></center>

@if (showFlights)
{
    <div class="flights">
        <label>Select a flight:</label>
        <select class="flights-field" name="flightCode" @onchange="OnFlightSelected">
            <option value="">Please select a flight from this list</option>
            @foreach (var flight in flights)
            {
                <option value="@flight.FlightCodes, @flight.Airline, @flight.FromCity, @flight.ToCity, @flight.Day, @flight.Time, @flight.Seat, @flight.Cost">
                    @flight.FlightCodes, @flight.Airline, @flight.FromCity, @flight.ToCity, @flight.Day, @flight.Time, @flight.Seat, @flight.Cost
                </option>
            }
        </select>
    </div>
}
else if (string.IsNullOrEmpty(selectedFromAirport) || string.IsNullOrEmpty(SelectedToAirport) || string.IsNullOrEmpty(selectedTravelDate))
{
    <div class="flights">
        <label>Select a flight:</label>
        <select class="flights-field" name="flightCode">
            <option value="">Loading...</option>
        </select>
    </div>
}
else
{
    <div class="flights">
        <label>Select a flight:</label>
        <select class="flights-field" name="flightCode">
            <option value="">There are no flights</option>
        </select>
    </div>
}

<h3 class="reserve-title">Reserve</h3>

<div class="flightCode">
    <label for="flightCodeInput">Flight code:</label>
    <input type="text" class="flightCode-field" id="flightCodeInput" placeholder="Flight" value="@selectedFlightCode" readonly />
</div>

<div class="airline">
    <label>Airline:</label>
    <input type="text" class="airline-field" placeholder="Airline" value="@selectedAirline" readonly />
</div>

<div class="day2">
    <label>Day:</label>
    <input type="text" class="day2-field" placeholder="Day" value="@selectedDay" readonly />
</div>

<div class="time">
    <label> Time: </label>
    <input type="text" class="time-field" placeholder="Time" value="@selectedTime" readonly />
</div>

<div class="cost">
    <label> Cost: </label>
    <input type="text" class="cost-field" placeholder="0" @bind-value="cost" readonly />

</div>

@code {
    string selectedFlightCode = "";
    string selectedAirline = "";
    string selectedDay = "";
    string selectedTime = "";
    decimal cost = 0;

    void OnFlightSelected(ChangeEventArgs e)
    {
        var flightInfo = e.Value?.ToString()?.Split(',').Select(x => x.Trim()).ToList();

        if (flightInfo == null || flightInfo.Count < 8)
        {
            // Reset the flight information fields to their default values
            selectedFlightCode = "";
            selectedAirline = "";
            selectedDay = "";
            selectedTime = "";
            cost = 0;
        }
        else
        {
            // Set the flight information fields to the selected flight values
            selectedFlightCode = flightInfo[0];
            selectedAirline = flightInfo[1];
            selectedDay = flightInfo[4];
            selectedTime = flightInfo[5];
            cost = decimal.Parse(flightInfo[7]);
        }
    }

}

<div class="name">
    <label> Name: </label>
    <input type="text" class="name-field" placeholder="Name" @bind="name" />
</div>

<div class="citizenship">
    <label> Citizenship: </label>
    <input type="text"
           class="citizenship-field"
           placeholder="Citizenship"
           @bind="citizenship" />
</div>

<div class="reserve reserve-btn">
    <button type="button" class="btn">Reserve</button><br />
    <div class="reservation-code">
        <span>Reservation code: </span>
    </div>
</div>






@code {
    string name = "";
    string citizenship = "";

    void OnNameInput(ChangeEventArgs e)
    {
        name = e.Value.ToString();
    }

    void OnCitizenshipInput(ChangeEventArgs e)
    {
        citizenship = e.Value.ToString();
    }
}